@startuml

class CampusNavigation {
    +main(String[] args): void
    -getGraph(): Graph
}

class Graph {
    -nodes: Map<Integer, String>
    -adjacents: Map<Integer, List<Edge>>
    +Graph()
    +addNode(int index, String name): void
    +addEdge(int from, int to, double distance, double accessibilityCoefficient): void
    +getNodes(): Map<Integer, String>
    +getNodeName(int index): String
    +getAdjacents(int node): List<Edge>
}

class Edge {
    -to: int
    -weight: double
    +Edge(int to, double weight)
    +getTo(): int
    +getWeight(): double
}

class Node implements Comparable<Node> {
    -id: int
    -distance: double
    +Node(int id, double distance)
    +getId(): int
    +compareTo(Node other): int
}

class DijkstraAlgorithm {
    -graph: Graph
    -distances: Map<Integer, Double>
    -predecessors: Map<Integer, Integer>
    -settledNodes: Set<Integer>
    -priorityQueue: PriorityQueue<Node>
    +DijkstraAlgorithm(Graph graph)
    +computeShortestPaths(int source): void
    +getPath(int destination): List<Integer>
    +getDistance(int destination): double
    -evaluateNeighbours(int u): void
}

CampusNavigation --> Graph
Graph --> Edge
Graph --> Node
DijkstraAlgorithm --> Graph
DijkstraAlgorithm --> Node
DijkstraAlgorithm --> Edge

@enduml
